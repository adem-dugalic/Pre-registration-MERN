{"ast":null,"code":"import isSelectable from './isSelectable';\nimport { RETURN, RIGHT, TAB } from '../constants';\nexport default function shouldSelectHint(_ref, _ref2) {\n  var currentTarget = _ref.currentTarget,\n      keyCode = _ref.keyCode;\n  var hintText = _ref2.hintText,\n      selectHintOnEnter = _ref2.selectHintOnEnter,\n      value = _ref2.value;\n\n  if (!hintText) {\n    return false;\n  }\n\n  if (keyCode === RIGHT) {\n    // For selectable input types (\"text\", \"search\"), only select the hint if\n    // it's at the end of the input value. For non-selectable types (\"email\",\n    // \"number\"), always select the hint.\n    return isSelectable(currentTarget) ? currentTarget.selectionStart === value.length : true;\n  }\n\n  if (keyCode === TAB) {\n    return true;\n  }\n\n  if (keyCode === RETURN && selectHintOnEnter) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/tare9/Desktop/Pre-registration-MERN1/node_modules/react-bootstrap-typeahead/es/utils/shouldSelectHint.js"],"names":["isSelectable","RETURN","RIGHT","TAB","shouldSelectHint","_ref","_ref2","currentTarget","keyCode","hintText","selectHintOnEnter","value","selectionStart","length"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,GAAxB,QAAmC,cAAnC;AACA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuC;AACpD,MAAIC,aAAa,GAAGF,IAAI,CAACE,aAAzB;AAAA,MACIC,OAAO,GAAGH,IAAI,CAACG,OADnB;AAEA,MAAIC,QAAQ,GAAGH,KAAK,CAACG,QAArB;AAAA,MACIC,iBAAiB,GAAGJ,KAAK,CAACI,iBAD9B;AAAA,MAEIC,KAAK,GAAGL,KAAK,CAACK,KAFlB;;AAIA,MAAI,CAACF,QAAL,EAAe;AACb,WAAO,KAAP;AACD;;AAED,MAAID,OAAO,KAAKN,KAAhB,EAAuB;AACrB;AACA;AACA;AACA,WAAOF,YAAY,CAACO,aAAD,CAAZ,GAA8BA,aAAa,CAACK,cAAd,KAAiCD,KAAK,CAACE,MAArE,GAA8E,IAArF;AACD;;AAED,MAAIL,OAAO,KAAKL,GAAhB,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,MAAIK,OAAO,KAAKP,MAAZ,IAAsBS,iBAA1B,EAA6C;AAC3C,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["import isSelectable from './isSelectable';\r\nimport { RETURN, RIGHT, TAB } from '../constants';\r\nexport default function shouldSelectHint(_ref, _ref2) {\r\n  var currentTarget = _ref.currentTarget,\r\n      keyCode = _ref.keyCode;\r\n  var hintText = _ref2.hintText,\r\n      selectHintOnEnter = _ref2.selectHintOnEnter,\r\n      value = _ref2.value;\r\n\r\n  if (!hintText) {\r\n    return false;\r\n  }\r\n\r\n  if (keyCode === RIGHT) {\r\n    // For selectable input types (\"text\", \"search\"), only select the hint if\r\n    // it's at the end of the input value. For non-selectable types (\"email\",\r\n    // \"number\"), always select the hint.\r\n    return isSelectable(currentTarget) ? currentTarget.selectionStart === value.length : true;\r\n  }\r\n\r\n  if (keyCode === TAB) {\r\n    return true;\r\n  }\r\n\r\n  if (keyCode === RETURN && selectHintOnEnter) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}"]},"metadata":{},"sourceType":"module"}